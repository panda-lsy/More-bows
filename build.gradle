buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://repo1.maven.org/maven2/" }
        maven { url = "https://maven.google.com/" }
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        dependencies {
            classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        }
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'com.guardsquare:proguard-gradle:7.3.2'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.ltgt.errorprone' version '3.0.1'
    id 'com.github.spotbugs' version '5.0.13'
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
}

// Reproducible builds! https://docs.gradle.org/4.9/userguide/working_with_files.html#sec:reproducible_archives
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// TODO add compilation with Java toolchains

sourceCompatibility = JavaVersion.VERSION_17
sourceCompatibility = JavaVersion.VERSION_17

final def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(17)
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import proguard.gradle.ProGuardTask

archivesBaseName = project.archives_base_name
version = project.mod_version + "+1.19.2.forge"
group = project.maven_group
def internalVersion = project.mod_version

//final def modName = project.mod_name
final def build_release = System.getenv("BUILD_RELEASE") == "true"

// Add snapshot suffix to version if not building a release.
// To build a release, set the environment variable BUILD_RELEASE to true.
if (!build_release) {
    version += "-SNAPSHOT"
    internalVersion += "-SNAPSHOT"
}

// Information for ForgeGradle to configure the Minecraft / Forge version.
minecraft {
    mappings channel: project.mcp_channel, version: project.mcp_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    // Another list of dependencies to use with ProGaurd, as ForgeGradle isn't happy about resolving it the normal way.
    // I'm not happy about it either.
    proguardHack {
        exclude group: "com.google.code.findbugs", module: "jsr305"
    }
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    // Cloth config
    compileOnly(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}"))
    proguardHack(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}"))

    // NullAway
    annotationProcessor "com.uber.nullaway:nullaway:0.10.10"

    // JetBrains null annotations
    compileOnly "org.jetbrains:annotations:24.0.1"
    proguardHack "org.jetbrains:annotations:24.0.1"

    // SpotBugs annotations
    compileOnly "com.github.spotbugs:spotbugs-annotations:4.7.3"
    proguardHack "com.github.spotbugs:spotbugs-annotations:4.7.3"

    // Error Prone
    errorprone "com.google.errorprone:error_prone_core:2.18.0"
    compileOnly "com.google.errorprone:error_prone_annotations:2.18.0"
    proguardHack "com.google.errorprone:error_prone_annotations:2.18.0"
}

jar.finalizedBy('reobfJar')

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", internalVersion
    inputs.property "modName", project.mod_name

    // Replace values in only mods.toml.
    filesMatching("META-INF/mods.toml") {
        expand "version": internalVersion, "modName": project.mod_name, "cloth_config_version": project.cloth_config_version
    }

    // Minify .json files in built .jar
    doLast {
        fileTree(dir: outputs.files.asPath, includes: [
            "**/*.mcmeta",
            "**/*.json"
        ]).each { final File file ->
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
// TODO What are these used for?
jar {
    manifest {
        attributes([
            "Specification-Title": "morebows",
            "Specification-Vendor": "NeRd",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"NeRd",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

import net.ltgt.gradle.errorprone.CheckSeverity

tasks.withType(JavaCompile).configureEach {
    // Ensures that the encoding of source files is set to UTF-8, see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    options.encoding = "UTF-8"
    // Tells Gradle to include more debug information in compiled .class files. For the optimised files, this will be removed by ProGuard.
    options.debug = true
    options.debugOptions.debugLevel = "source,lines,vars"

    // NullAway configuration
    options.errorprone {
        check("NullAway", CheckSeverity.ERROR)
        option("NullAway:AnnotatedPackages", "iDiamondhunter.morebows")
    }
}

// This task creates a .jar file containing the source code of this mod.
tasks.register('sourcesJar', Jar) {
    dependsOn(classes)

    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

// This task creates a .jar file containing a deobfuscated version of this mod, for ProGuard to minimise.
tasks.register('unmappedJar', Jar) {
    archiveClassifier = "dev"
    from sourceSets.main.output
}

// This task uses ProGuard to shrink the built .jar's file size and optimise the bytecode. TODO Cleanup.
tasks.register('proguard', ProGuardTask) {
    dependsOn(unmappedJar)
    verbose

    // Use the non-remapped .jar as the input file, because ForgeGradle has a convenient task to map it to obfuscated Minecraft class names for us when we're done optimising it
    injars "build/libs/" + rootProject.name + "-" + version + "-dev.jar"
    outjars "build/libs/" + rootProject.name + "-" + version + "-proguard-dev.jar"

    // Get the Java standard library from the provided toolchain.
    libraryjars compiler.get().metadata.installationPath.asFile.absolutePath + "/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'

    // Add relevant Minecraft libraries to ProGuard's list of libraries to obfuscate against.
    libraryjars project.configurations.minecraft

    // Add the dependencies to ProGuard's list of libraries to obfuscate against. I'd love a more sane way of doing this.
    libraryjars project.configurations.proguardHack

    // The rest of the configs are in this file
    configuration 'guard.pro'
}

// TODO rethink probably
tasks.register('optimisedJar', Jar) {
    dependsOn(proguard)

    from zipTree(proguard.outputs.files.singleFile)
    //archiveClassifier = "proguard"
}

reobf {
    optimisedJar {
        // This line left intentionally blank?
    }
}

tasks.optimisedJar.finalizedBy('reobfOptimisedJar')

jar {
    archiveClassifier = "debug" // Contains things like variables with actual names, line numbers etc. Useful for debugging, but these things take up file size, so they have to go.
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives sourcesJar
    archives optimisedJar
}

// TODO this is a bit dumb
tasks.register('deleteProGuardOutput', Delete) {
    dependsOn(proguard)

    delete proguard.outputs.files.singleFile
}

build.finalizedBy(cleanUnmappedJar, deleteProGuardOutput)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(optimisedJar) {
                builtBy optimisedJar
            }
        }
    }
}
